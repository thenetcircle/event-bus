{
    "docs": [
        {
            "location": "/",
            "text": "EventBus is a messages/events delivering application, It is designed to be a message/event hub to transfer data from different sources to different sinks.\nIt is using internally for unified data collection(collect data from different sources with specific data format to our data warehouse) and async events delivering among services.\n\n\nIt comes with some implemented sources(http, kafka, redis, etc...), sinks(http, kafka, etc...), fallbacks(see the document) and a extendable structure. Also a admin interface to easily manage the relationship between them.\n\n\n\n\nFeatures\n\n\n\n\nSupplies multiple different sources and sinks.\n\n\nSupplies failure demotion(fallback) strategy and recovering ability.\n\n\nBased on AkkaStreams, Offers excellent performance and back-pressure ability.\n\n\nStateless, Easier for deployment, high availability and load balance.\n\n\nComes with a simple admin interface for managing and watching whole cluster.\n\n\n\n\nContributing\n\n\nFeedbacks and pull requests are welcome and appreciative. For major changes, please open an issue first to discuss what you would like to change.",
            "title": "Welcome"
        },
        {
            "location": "/#features",
            "text": "Supplies multiple different sources and sinks.  Supplies failure demotion(fallback) strategy and recovering ability.  Based on AkkaStreams, Offers excellent performance and back-pressure ability.  Stateless, Easier for deployment, high availability and load balance.  Comes with a simple admin interface for managing and watching whole cluster.",
            "title": "Features"
        },
        {
            "location": "/#contributing",
            "text": "Feedbacks and pull requests are welcome and appreciative. For major changes, please open an issue first to discuss what you would like to change.",
            "title": "Contributing"
        },
        {
            "location": "/installation/",
            "text": "Requirements\n\n\n\n\nJava 1.8+ installed\n\n\nSbt\n\n\nKafka 0.10+\n\n\nAnsible (using for deployment)\n\n\n\n\nInstallation\n\n\nFrom Source\n\n\n\n\nclone the code\n\n\n\n\ngit clone https://github.com/thenetcircle/event-bus.git\n\n\n\n\n\n\nchange configs\n\n\npackage\n\n\n\n\nsbt stage\n\n\n\n\nSbt\n\n\nMaven",
            "title": "Installation"
        },
        {
            "location": "/installation/#requirements",
            "text": "Java 1.8+ installed  Sbt  Kafka 0.10+  Ansible (using for deployment)",
            "title": "Requirements"
        },
        {
            "location": "/installation/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/installation/#from-source",
            "text": "clone the code   git clone https://github.com/thenetcircle/event-bus.git   change configs  package   sbt stage",
            "title": "From Source"
        },
        {
            "location": "/installation/#sbt",
            "text": "",
            "title": "Sbt"
        },
        {
            "location": "/installation/#maven",
            "text": "",
            "title": "Maven"
        },
        {
            "location": "/quickstart/",
            "text": "Background\n\n\nEventBus works like a postman to delivering stuff from source to target.\n\nLet's set up a scenario to describe how it works.  \n\n\nFor example if we have a web application which writen by PHP, \nAnd we have some other backend services using different languages like Java, Nodejs, Python.\nAnd we want that if something happened on any of them, And the thing have to be aware by other services for perhaps some updates.     \n\n\nThe workflow will like this:\n\n\n\n\nSetting up EventBus\n\n\nFirst of all we need to tell EventBus what to do, Since EventBus supports multiple different sources(called Receiver in EventBus) and targets(called Emitter). We need to point out which of them is using in this scenario.\n\nLet's create a configuration file to describe this, The configuration file is based on \nTypesafe Config\n, similar as json.\nLet's create a file called application.conf, Put it on root of EventBus directory.\n\n\n# includes the original configuration\ninclude \"application\"\n\n# EventBus runtime configuration\nevent-bus.runtime {\n\n  # Creates a PipelinePool and declare what Pipelines it has.\n  pipeline-pool = [\n    {\n      name = TestPipeline\n      type = kafka\n\n      # Sets up the Pipeline specific settings\n      akka.kafka.producer {\n        kafka-clients {\n          bootstrap.servers = \"...\"\n        }\n      }\n      akka.kafka.consumer {\n        kafka-clients {\n          bootstrap.servers = \"...\"\n        }\n      }\n    }\n  ]\n\n  # Creates Transporters which will accept data from outside to Pipeline.\n  transporters = [{\n    name = TestTransporter\n\n    # Declares which EntryPoints this Transporter can support.\n    receivers = [\n      {\n        type = http\n        name = TestReceiver1\n\n        # Receiver specific parameters\n        interface = localhost\n        port = 8086\n      }\n    ]\n\n    # Declares which Pipeline it using (from PipelinePool)\n    pipeline {\n      name = TestPipeline\n    }\n\n    # Transporter specific parameters.\n    transport-parallelism = 1\n    commit-parallelism = 10\n    akka.stream.materializer {}\n  }]\n\n  # Creates Dispatchers which will publish data from Pipeline to outside.\n  dispatchers = [{\n    name = StressTestDispatcher\n\n    # Declares which Emitters this Dispatcher can support.\n    emitters = [{\n      type = http\n      name = TestEmitter\n\n      # Emitter specific parameters\n      request {\n        host = localhost\n        port = 8087\n        uri = \"/\"\n      }\n      akka.http.host-connection-pool {\n        max-open-requests = 32\n      }\n    }]\n\n    # Declares which Pipeline it using (from PipelinePool)\n    pipeline {\n      name = TestPipeline\n\n      # The options of using the Pipeline\n      outlet {\n        group-id = EventBus.TestDispatcher\n        topics = [\"default\"]\n      }\n    }\n  }]\n}\n\n\n\n\nLaunch EventBus\n\n\nAfter you set up the configuration, Please make sure the dependencies are also set up properly. Like: Kafka...\n\nThen we can launch EventBus by the way if want, Let's using normal way here.\n\n\n\n\npackage EventBus\n\n\n\n\nsbt clean compile stage\n\n\n\n\n\n\nlaunch with the configuration\n\n\n\n\n./target/universal/stage/bin/event-bus -Dconfig.file=./application.conf\n\n\n\n\nNow EventBus should be listening on localhost port 8086 expecting for HTTP messages, And transporting messages to Kafka then delivering to localhost port 8087 by HTTP.",
            "title": "QuickStart"
        },
        {
            "location": "/quickstart/#background",
            "text": "EventBus works like a postman to delivering stuff from source to target. \nLet's set up a scenario to describe how it works.    For example if we have a web application which writen by PHP, \nAnd we have some other backend services using different languages like Java, Nodejs, Python.\nAnd we want that if something happened on any of them, And the thing have to be aware by other services for perhaps some updates.       The workflow will like this:",
            "title": "Background"
        },
        {
            "location": "/quickstart/#setting-up-eventbus",
            "text": "First of all we need to tell EventBus what to do, Since EventBus supports multiple different sources(called Receiver in EventBus) and targets(called Emitter). We need to point out which of them is using in this scenario. \nLet's create a configuration file to describe this, The configuration file is based on  Typesafe Config , similar as json.\nLet's create a file called application.conf, Put it on root of EventBus directory.  # includes the original configuration\ninclude \"application\"\n\n# EventBus runtime configuration\nevent-bus.runtime {\n\n  # Creates a PipelinePool and declare what Pipelines it has.\n  pipeline-pool = [\n    {\n      name = TestPipeline\n      type = kafka\n\n      # Sets up the Pipeline specific settings\n      akka.kafka.producer {\n        kafka-clients {\n          bootstrap.servers = \"...\"\n        }\n      }\n      akka.kafka.consumer {\n        kafka-clients {\n          bootstrap.servers = \"...\"\n        }\n      }\n    }\n  ]\n\n  # Creates Transporters which will accept data from outside to Pipeline.\n  transporters = [{\n    name = TestTransporter\n\n    # Declares which EntryPoints this Transporter can support.\n    receivers = [\n      {\n        type = http\n        name = TestReceiver1\n\n        # Receiver specific parameters\n        interface = localhost\n        port = 8086\n      }\n    ]\n\n    # Declares which Pipeline it using (from PipelinePool)\n    pipeline {\n      name = TestPipeline\n    }\n\n    # Transporter specific parameters.\n    transport-parallelism = 1\n    commit-parallelism = 10\n    akka.stream.materializer {}\n  }]\n\n  # Creates Dispatchers which will publish data from Pipeline to outside.\n  dispatchers = [{\n    name = StressTestDispatcher\n\n    # Declares which Emitters this Dispatcher can support.\n    emitters = [{\n      type = http\n      name = TestEmitter\n\n      # Emitter specific parameters\n      request {\n        host = localhost\n        port = 8087\n        uri = \"/\"\n      }\n      akka.http.host-connection-pool {\n        max-open-requests = 32\n      }\n    }]\n\n    # Declares which Pipeline it using (from PipelinePool)\n    pipeline {\n      name = TestPipeline\n\n      # The options of using the Pipeline\n      outlet {\n        group-id = EventBus.TestDispatcher\n        topics = [\"default\"]\n      }\n    }\n  }]\n}",
            "title": "Setting up EventBus"
        },
        {
            "location": "/quickstart/#launch-eventbus",
            "text": "After you set up the configuration, Please make sure the dependencies are also set up properly. Like: Kafka... \nThen we can launch EventBus by the way if want, Let's using normal way here.   package EventBus   sbt clean compile stage   launch with the configuration   ./target/universal/stage/bin/event-bus -Dconfig.file=./application.conf  Now EventBus should be listening on localhost port 8086 expecting for HTTP messages, And transporting messages to Kafka then delivering to localhost port 8087 by HTTP.",
            "title": "Launch EventBus"
        },
        {
            "location": "/concepts/",
            "text": "Story\n\n\nSource\n\n\nSink\n\n\nTransform\n\n\nFallback",
            "title": "Concepts"
        },
        {
            "location": "/concepts/#story",
            "text": "",
            "title": "Story"
        },
        {
            "location": "/concepts/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/concepts/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/concepts/#transform",
            "text": "",
            "title": "Transform"
        },
        {
            "location": "/concepts/#fallback",
            "text": "",
            "title": "Fallback"
        },
        {
            "location": "/components/",
            "text": "",
            "title": "Components"
        },
        {
            "location": "/data_format/",
            "text": "ActivityStreams",
            "title": "Data Format"
        },
        {
            "location": "/data_format/#activitystreams",
            "text": "",
            "title": "ActivityStreams"
        },
        {
            "location": "/deployment/",
            "text": "Ansible\n\n\nChange Configuration\n\n\nDeploy to specific servers\n\n\nansible-playbook -i ansible/lab ansible/site.yml -e \"service_name=stresstest\"\n\n\n\n\nDocker\n\n\nManually",
            "title": "Deployment"
        },
        {
            "location": "/deployment/#ansible",
            "text": "",
            "title": "Ansible"
        },
        {
            "location": "/deployment/#change-configuration",
            "text": "",
            "title": "Change Configuration"
        },
        {
            "location": "/deployment/#deploy-to-specific-servers",
            "text": "ansible-playbook -i ansible/lab ansible/site.yml -e \"service_name=stresstest\"",
            "title": "Deploy to specific servers"
        },
        {
            "location": "/deployment/#docker",
            "text": "",
            "title": "Docker"
        },
        {
            "location": "/deployment/#manually",
            "text": "",
            "title": "Manually"
        },
        {
            "location": "/admin/",
            "text": "ActivityStreams",
            "title": "Admin"
        },
        {
            "location": "/admin/#activitystreams",
            "text": "",
            "title": "ActivityStreams"
        },
        {
            "location": "/monitoring/",
            "text": "",
            "title": "Monitoring"
        }
    ]
}